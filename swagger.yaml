openapi: 3.0.3
info:
  title: "shop api"
  version: 1.0.0
tags:
  - name: cart
  - name: product
  - name: user
paths:
  /login:
    post:
      tags: 
       - user
      summary: Login user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequestBody'
      responses:
        '200':
          description: User is logined
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjU0NjYwYWVkNTUxYTAyZWU1MzZmZTRjIiwiZW1haWwiOiJ0ZXN0MkBnbWFpbC5jb20iLCJyb2xlIjoiY3VzdG9tZXIiLCJpYXQiOjE2OTkxMTE1NTUsImV4cCI6MTY5OTExODc1NX0.2UkbA0U464r2WfKN6RMWvhMzc3wVo71dq6rKvUmoVTs
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Cart is empty
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
  /register:
    post:
      tags: 
       - user
      summary: Register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequestBody'
      responses:
        '200':
          description: User is registered
          content:
            text:
              example: User successfully registered
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Cart is empty
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
  /api/profile/cart:
    get:
      security:
        - bearerAuth: []
      tags:
        - cart
      summary: Get user cart or create if it is missing
      responses:
        '200':
          description: Returns user cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data:
                  cart:
                    id: 6546650c159ab6e8bb59f925
                    items:
                      - product:
                          id: 65426846103aa5e276433519
                          title: Book
                          description: Interesting book
                          price: 200
                        count: 2
                  total: 400
                error: null
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
    put:
      security:
        - bearerAuth: []
      tags:
        - cart
      summary: Update user cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartRequestBody'
      responses:
        '200':
          description: Cart can be updated in the following ways - 1) products can be added 2) products can be dropped 3) amount of product might have changed. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data:
                  cart:
                    id: 6546650c159ab6e8bb59f925
                    items:
                      - product:
                          id: 65426846103aa5e276433519
                          title: Book
                          description: Interesting book
                          price: 200
                        count: 2
                  total: 400
                error: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Products are not valid
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Cart was not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
    delete:
      security:
        - bearerAuth: []
      tags:
        - cart
      summary: Empty user cart
      parameters:
        - in: header
          name: x-user-id
          schema:
            type: string
          required: true
          description: User id
          example: '654660aed551a02ee536fe4c'
      responses:
        '200':
          description: Returns success = true if cart was successfully emptied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
              example:
                data:
                  success: true
                error: null
        '403':
          description: Forbidden (when user isn't admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Forbidden
        '401':
          description: Unauthorized (when no token is found or Header x-user-id is missing or no user with such id)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
  /api/profile/cart/checkout:
    post:
      security:
        - bearerAuth: []
      tags:
        - cart
      summary: Create an order
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
              example:
                data:
                  order:
                    id: 654664c3159ab6e8bb59f912
                    userId: 654660aed551a02ee536fe4c
                    cartId: 65466369efd3f9a3ddf5f223
                    items:
                      - product:
                          id: 65426846103aa5e276433519
                          title: Book
                          description: Interesting book
                          price: 200
                        count: 2
                      - product:
                          id: 65426846103aa5e276433518
                          title: Pen
                          description: Cute pen
                          price: 20
                        count: 5
                    payment:
                      type: paypal
                      address: London
                      creditCard: 1234-1234-1234-1234
                    delivery:
                      type: post
                      address: London
                    comments: ''
                    status: created
                    total: 500
                error: null
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Cart is empty
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
  /api/products:
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Returns a list of products
      responses:
        '200':
          description: Returns a list of all products available
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductsResponse'
              example:
                data:
                  - id: 65426846103aa5e276433519
                    title: Book
                    description: Interesting book
                    price: 200
                  - id: a65426846103aa5e276433518
                    title: Pen
                    description: Cute pen
                    price: 20
                error: null
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
  /api/products/{productId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Returns single product
      parameters:
        - name: productId
          in: path
          description: Id  of product to return
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                data:
                  id: 65426846103aa5e276433519
                  title: Book
                  description: Interesting book
                  price: 200
                error: null
        '403':
          description: Forbidden (when token is missed or invalid)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Invalid Token
        '401':
          description: Unauthorized (when no token is found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: Token is required
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: No product with such id
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
              example:
                data: null
                error:
                  message: 'Internal Server error'
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    Cart:
      type: object
      properties:
        id:
          type: string
          description: Cart id
          example: 654660f1d551a02ee536fe53
        items:
          type: array
          description: Items added to cart
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        count:
          type: number
          description: Total count of specific products
          example: 2
    Product:
      type: object
      properties:
        id:
          type: string
          description: Product id (uuid)
          example: 65426846103aa5e276433519
        title:
          type: string
          description: Product name
          example: Book
        description:
          type: string
          description: Product description
          example: Interesting book
        price:
          type: number
          description: Product price
          example: 200
    Order:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        cartId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        payment:
          type: object
          properties:
            type:
              type: string
            address:
              type: string
            creditCard:
              type: string
        delivery:
          type: object
          properties:
            type:
              type: string
            address:
              type: string
        comments:
          type: string
        status:
          type: string
        total:
          type: number
    CartResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            cart:
              $ref: '#/components/schemas/Cart'
            total:
              type: number
        error:
          $ref: '#/components/schemas/ErrorResponse'
    CheckoutResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            order:
              $ref: '#/components/schemas/Order'
        error:
          $ref: '#/components/schemas/ErrorResponse'
    ProductResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Product'
        error:
          $ref: '#/components/schemas/ErrorResponse'
    ProductsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        error:
          $ref: '#/components/schemas/ErrorResponse'
    UpdateCartRequestBody:
      type: object
      properties:
        productId:
          type: string
          example: "65426846103aa5e276433519"
        count:
          type: number
          example: 5
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          example: "ann.jones@gmail.com"
        password:
          type: string
          example: "DDQldls?kdpw0fk"
    LoginUserRequestBody:
      type: object
      properties:
        email:
          type: string
          example: "test2@gmail.com"
        password:
          type: string
          example: 0123456789
    RegisterUserRequestBody:
      type: object
      properties:
        email:
          type: string
          example: "test2@gmail.com"
        password:
          type: string
          example: 0123456789
        name:
          type: string
          example: Name
        isAdmin:
          type: boolean
          example: true
    EmptySuccessResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            success:
              type: boolean
        error:
          $ref: '#/components/schemas/ErrorResponse'
    ErrorResponse:
      type: object
      nullable: true
      properties:
        message:
          type: string
